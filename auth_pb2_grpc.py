# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import auth_pb2 as auth__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/auth.Auth/Authenticate',
                request_serializer=auth__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=auth__pb2.AuthenticateReply.FromString,
                )
        self.CreateUser = channel.unary_unary(
                '/auth.Auth/CreateUser',
                request_serializer=auth__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=auth__pb2.CreateUserReply.FromString,
                )
        self.VerifyAccess = channel.unary_unary(
                '/auth.Auth/VerifyAccess',
                request_serializer=auth__pb2.VerifyAccessRequest.SerializeToString,
                response_deserializer=auth__pb2.VerifyAccessReply.FromString,
                )
        self.FinishExecution = channel.unary_unary(
                '/auth.Auth/FinishExecution',
                request_serializer=auth__pb2.FinishExecutionRequest.SerializeToString,
                response_deserializer=auth__pb2.FinishExecutionReply.FromString,
                )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=auth__pb2.AuthenticateRequest.FromString,
                    response_serializer=auth__pb2.AuthenticateReply.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=auth__pb2.CreateUserRequest.FromString,
                    response_serializer=auth__pb2.CreateUserReply.SerializeToString,
            ),
            'VerifyAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAccess,
                    request_deserializer=auth__pb2.VerifyAccessRequest.FromString,
                    response_serializer=auth__pb2.VerifyAccessReply.SerializeToString,
            ),
            'FinishExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishExecution,
                    request_deserializer=auth__pb2.FinishExecutionRequest.FromString,
                    response_serializer=auth__pb2.FinishExecutionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/Authenticate',
            auth__pb2.AuthenticateRequest.SerializeToString,
            auth__pb2.AuthenticateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CreateUser',
            auth__pb2.CreateUserRequest.SerializeToString,
            auth__pb2.CreateUserReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/VerifyAccess',
            auth__pb2.VerifyAccessRequest.SerializeToString,
            auth__pb2.VerifyAccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/FinishExecution',
            auth__pb2.FinishExecutionRequest.SerializeToString,
            auth__pb2.FinishExecutionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
