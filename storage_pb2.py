# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: storage.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rstorage.proto\x12\x07storage\";\n\rInsertRequest\x12\x0b\n\x03key\x18\x01 \x01(\x05\x12\r\n\x05value\x18\x02 \x01(\t\x12\x0e\n\x06secret\x18\x03 \x01(\x0c\"\x1d\n\x0bInsertReply\x12\x0e\n\x06status\x18\x01 \x01(\x05\")\n\nGetRequest\x12\x0b\n\x03key\x18\x01 \x01(\x05\x12\x0e\n\x06secret\x18\x02 \x01(\x0c\"\x19\n\x08GetReply\x12\r\n\x05value\x18\x01 \x01(\t\"\x12\n\x10TerminateRequest\"1\n\x0eTerminateReply\x12\x0e\n\x06status\x18\x01 \x01(\x05\x12\x0f\n\x07message\x18\x02 \x01(\t2\xb7\x01\n\x07Storage\x12\x38\n\x06Insert\x12\x16.storage.InsertRequest\x1a\x14.storage.InsertReply\"\x00\x12/\n\x03Get\x12\x13.storage.GetRequest\x1a\x11.storage.GetReply\"\x00\x12\x41\n\tTerminate\x12\x19.storage.TerminateRequest\x1a\x17.storage.TerminateReply\"\x00\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'storage_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _INSERTREQUEST._serialized_start=26
  _INSERTREQUEST._serialized_end=85
  _INSERTREPLY._serialized_start=87
  _INSERTREPLY._serialized_end=116
  _GETREQUEST._serialized_start=118
  _GETREQUEST._serialized_end=159
  _GETREPLY._serialized_start=161
  _GETREPLY._serialized_end=186
  _TERMINATEREQUEST._serialized_start=188
  _TERMINATEREQUEST._serialized_end=206
  _TERMINATEREPLY._serialized_start=208
  _TERMINATEREPLY._serialized_end=257
  _STORAGE._serialized_start=260
  _STORAGE._serialized_end=443
# @@protoc_insertion_point(module_scope)
